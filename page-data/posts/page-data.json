{"componentChunkName":"component---src-templates-category-template-js","path":"/posts","result":{"pageContext":{"currentCategory":"All","categories":["All","JS","DeepDive","web","Github"],"edges":[{"node":{"id":"d4ee223b-057d-5b2b-912d-7188f2585d68","excerpt":"개발 프로젝트를 진행하면서 로그인/회원가입 기능을 구현하고 있다. 백엔드 팀원들과 협의하여 access token과 refresh token으로 사용자 인증을 진행하기로 했다. JWT access token & refresh token 인증 방식이 궁금하다면, 해당 블로그를 참고하면 좋을 것 같다! 이제 토큰을 안전하게 저장해야 하는데… JWT 토큰은 대체 어디에 저장해야 하는 건가..!!  JWT 토큰을 안전하게 저장해야 하는 이유  은 인증에 필요한 정보들을 암호화시킨 JSON 형식의 토큰을 의미한다. 즉, 암호화되어 있다 해도 JWT 토큰에는 사용자의 중요한 정보가 담겨있고 토큰을 통해 사용자 인증을 진행하기 때문에 보안에 신경써야 한다는 의미이다! JWT 토큰을 저장하는 과정에서 다음과 같은 보안 공격에 노출될 수 있음을 인지하고 방어해야 한다. XSS(Cross-Site Scripting) 💡 CSS(Cascading Style Sheets) 약자는 이미 널리 사용되고 있…","fields":{"slug":"/store-jwt-token/"},"frontmatter":{"categories":"web","title":"JWT 토큰 저장하기","date":"August 22, 2022"}},"next":{"fields":{"slug":"/js-array-from/"}},"previous":null},{"node":{"id":"410ba680-4c44-5996-ad79-a0f9ca9e34e0","excerpt":"을 사용하면 다양한 값으로 배열을 채울 수 있다. 첫번째 매개변수로  혹은  를 전달하면 이를 얕게 복사해서 새로운 Array 객체를 만든다. optional 매개변수로  콜백을 전달할 수 있는데, 중간에 다른 배열을 생성하지 않는다는 점을 제외하면  와 같다. 1차원 배열 하나의 수로 채우기 ES6에서 도입된  메소드를 사용하여 배열을 한번에 채우는 방법도 있다. 1씩 증가하는 배열 만들기 1씩 증가하는 배열을 만들고 싶다면  의 두번째 인자인 index를 활용하면 된다. 0부터 1씩 증가하는 배열을 만들 때  로 배열의 인덱스를 추출하여 만들 수도 있다. 2부터 2씩 증가하는 배열은 다음과 같이 만들면 된다. 2차원 배열 빈 배열로 채우기 하나의 수로 채우기 그래프 탐색, 최소 비용 알고리즘 등에 많이 사용된다. 참고 JS팁_1. 배열 채우기 MDN Array.from() 1차원 배열 하나의 수로 채우기 1씩 증가하는 배열 만들기 2차원 배열 빈 배열로 채우기 하나의 수로 채우…","fields":{"slug":"/js-array-from/"},"frontmatter":{"categories":"JS","title":"JavaScript 특정 값으로 배열 채우기 : Array.from()","date":"April 27, 2022"}},"next":{"fields":{"slug":"/modern-js-deep-dive-36/"}},"previous":{"fields":{"slug":"/store-jwt-token/"}}},{"node":{"id":"c72a3715-9f39-5f4c-8b3d-c5de9e379ed4","excerpt":"디스트럭처링 할당 (destructuring assignment) = 구조 분해 할당 구조화된 배열과 같은 이터러블 또는 객체를 비구조화하여 1개 이상의 변수에 개별적으로 할당하는 것을 의미한다. 36.1 배열 디스트럭처링 할당 ES5에서는 인덱스를 사용하여 반복적으로 배열 디스트럭처링 할당을 한다. ES6의 배열 디스트럭처링 할당 배열의 각 요소를 배열로부터 추출하여 1개 이상의 변수에 할당한다. 할당문 우변 항상 이어야 한다. 그렇지 않으면 에러가 발생한다. 배열의 인덱스를 기준으로 순서대로 할당된다. 변수의 개수와 이터러블의 요소 개수가 반드시 일치할 필요는 없다. 할당문 좌변 배열 리터럴 형태 로 할당받을 변수를 선언한다. 선언과 할당을 분리할 수도 있지만,  키워드를 사용할 수 없으므로 권장하지 않는다. 변수에 기본값을 설정할 수 있다. 기본값보다 할당된 값을 우선한다. Rest 요소  를 사용할 수 있다. 반드시 마지막에 위치 💡 배열 스트럭처링 할당은 이터러블에서 필요…","fields":{"slug":"/modern-js-deep-dive-36/"},"frontmatter":{"categories":"JS DeepDive","title":"[모던 자바스크립트 Deev Dive] 36장","date":"December 05, 2021"}},"next":{"fields":{"slug":"/modern-js-deep-dive-04/"}},"previous":{"fields":{"slug":"/js-array-from/"}}},{"node":{"id":"462a25cb-f42c-526e-851f-93e94e9795fe","excerpt":"4.1 변수란 무엇일까? 애플리케이션은 모두 데이터를 입력받아 처리하고 결과를 출력한다.\n변수는 프로그래밍 언어에서 데이터를 관리하기 위한 핵심 개념이다.\n변수란 무엇인지 그리고 왜 필요한지 살펴보자! memory 메모리는 데이터를 저장할 수 있는 메모리 셀의 집합체이다. 각 셀은 고유의 메모리 주소(memory address)를 가진다.  은 연산을 통해 새로운 값 30을 생성하고, 그 값은 메모리 공간에 저장된다. 만약 결과값 30을 재사용하고자 한다면 어떻게 해야할까? 메모리 주소를 통해 연산 결과 30이 저장된 메모리 공간에 직접 접근해야 한다. 그러나 자바스크립트는 개발자의 직접적인 메모리 제어를 허용하지 않는다. 코드가 실행되기 이전에는 값이 저장된 메모리 주소도 알 수 없다. 따라서 메모리 주소를 통해 값에 직접 접근하려는 시도는 올바른 방법이 아니다. 변수 프로그래밍 언어는 기억하고 싶은 값을 메모리에 저장하고, 저장된 값을 읽어 들여 재사용하기 위해  라는 메커니즘…","fields":{"slug":"/modern-js-deep-dive-04/"},"frontmatter":{"categories":"JS DeepDive","title":"[모던 자바스크립트 Deep Dive] 04장","date":"November 29, 2021"}},"next":{"fields":{"slug":"/github-profile/"}},"previous":{"fields":{"slug":"/modern-js-deep-dive-36/"}}},{"node":{"id":"17ea91df-6dc4-5148-b9d0-e1653264ff1c","excerpt":"👉🏻 소개 보기좋은 떡이 먹기도 좋다했다. README.md 파일을 활용해서 머찐 을 만들어 보자!  1. username/README.md 생성 은 특별한 레포이다. ✨ 자신의 Github username과 같은 이름의 레포를 만들면, 해당 레포의 README.md 파일을 통해 Gihub에 프로필을 띄울 수 있다. 아래 사진처럼 ,  을 선택하고 Repository를 생성한다.  이미 gxxrxn이라는 레포를 만들었기 때문에 빨간색 경고 메시지가 뜬다. 처음이라면 별다른 경고 없이 레파지토리를 생성할 수 있다! 2. README.md 꾸미기 레포 생성을 했다면, 아래 사진과 같이 자신의 Profile에 README 파일의 내용이 보일 것이다.  본격적으로 README를 꾸며보도록 하자! Shields.io로 뱃지 넣기 Shields.io로 아래와 같은 뱃지를 넣을 수 있다. Shields.io Sample Icons 👉🏻 소개 1. username/README.md 생성 2. REA…","fields":{"slug":"/github-profile/"},"frontmatter":{"categories":"Github","title":"멋진 Github 프로필을 만들어 보자.","date":"October 29, 2021"}},"next":null,"previous":{"fields":{"slug":"/modern-js-deep-dive-04/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}