{"componentChunkName":"component---src-templates-category-template-js","path":"/posts","result":{"pageContext":{"currentCategory":"All","categories":["All","JS","React","Github"],"edges":[{"node":{"id":"b74ffdc4-63f5-595f-b438-fd4a575c2c3e","excerpt":"1장. 리액트 시작 1.0 리액트의 탄생 많은 웹 프레임워크들은 주로 MVC, MVVM 아키텍처를 사용한다. Model : 애플리케이션에서 사용하는 데이터를 관리하는 영역 View : 사용자에게 보이는 영역 사용자와 상호작용하는 과정에서 모델 데이터를 조회하거나 수정하게 되고, 변경된 사항은 뷰에 반영해야한다. likes 값을 2로 업데이트한다면, 애플리케이션에서 post-1의 likes 요소를 찾아 내부를 수정해야한다. 수정해야 할 요소를 일일이 찾아 변경할 수는 있지만, 애플리케이션 규모가 크면 상당히 복잡해지고 성능 문제로 이어질 수 있다. 이러한 문제를 해결하기 위해 페이스북 개발 팀은 하나의 아이디어를 고안해낸다. 💡 데이터가 변할 때마다 뷰에 어떤 변화를 줄지 고민하지 말고, 기존의 뷰를 날려버리고 처음부터 새로 렌더링하자! 그렇게 개발된 리액트는 최대한 성능은 아끼고 편안한 사용자 경험을 제공하고자 구현된 자바스크립트 라이브러리이다.  1.1 리액트의 이해 리액트는 구…","fields":{"slug":"/react-tech-01/"},"frontmatter":{"categories":"React","title":"[리액트를 다루는 기술] 01장","date":"April 26, 2022"}},"next":{"fields":{"slug":"/js-localstorage/"}},"previous":null},{"node":{"id":"4c71118e-cf51-55f2-95c2-969ece85cc1b","excerpt":"우아한 테크코스 3주차 프리코스 미션을 구현하는데 등장한 낯선 .. 제대로된 코드를 작성하기 전에 미리 localStorage를 공부하면서 필요한 객체를 저장하고 꺼내보는 연습을 하자!\n 👀 들어가기에 앞서.. 우아한 테크코스 3주차 프리코스 미션은 자판기를 구현하는 것이다.\n자판기는 크게 3개의 기능이 있는데, 상품 추가가 가능한 상품 관리 기능 자판기 동전 충전 기능 자판기로 상품을 구매할 수 있는 기능 이다. 자세한 내용은 미션 저장소를 통해 확인할 수 있다. ✅ 저장할 객체 생성 먼저 미션 구현을 위해 어떤 객체를 localStorage에 저장해야 하는지를 생각해봐야 한다. 상품 관리 (Stock) 상품명 (productName) 가격 (price) 수량 (remaining) 자판기 잔돈 관리 (Change) 500원 (coin500) 100원 (coin100) 50원 (coin50) 10원 (coin10) 일단은 이정도 엔티티이면 충분할 것 같다! 자바스크립트 코드로 간단…","fields":{"slug":"/js-localstorage/"},"frontmatter":{"categories":"JS","title":"JavaScript localStorage에 객체 저장하기 (feat. 우테코 프리코스 3주차)","date":"December 12, 2021"}},"next":{"fields":{"slug":"/vanilla-js-tab-component/"}},"previous":{"fields":{"slug":"/react-tech-01/"}}},{"node":{"id":"e08c9748-1ac6-53cc-8328-3e028aa28237","excerpt":"Vanilla Javascript로 웹 컴포넌트 구현하기 해당 내용은 개발자 황준일님의 블로그 글을 읽고 정리한 내용입니다. 더 자세한 내용과 코드는 해당 블로그를 참고해주세요! 상태관리의 탄생 배경 브라우저와 Javascript가 발전하는 과정에서 SSR(Server-Side Rendering)에서 CSR(Client-Side Rendering)으로 기술이 변화하였다. 서버는 HTML을 만드는 것이 아니라 REST API 혹은 GraphQL 처럼 브라우저 렌더링에 필요한 데이터만 제공한다. SSR (Server-Side Rendering) 서버에서 HTML을 만들어 클라이언트에 넘겨준다. 따라서 클라이언트(브라우저)는 데이터를 정교하게 관리할 필요가 없었다. CSR (Clinet-Side Rendering) Javascript가 발전하며 클라이언트 단에서 모든 렌더링을 처리하려는 시도가 계속되었고, 그 결과 React, Angular, Vue 와 같은 프레임워크가 등장하게 되었다…","fields":{"slug":"/vanilla-js-tab-component/"},"frontmatter":{"categories":"JS","title":"Vanilla JS로 컴포넌트, tab 메뉴 구현하기","date":"December 10, 2021"}},"next":{"fields":{"slug":"/modern-js-deep-dive-36/"}},"previous":{"fields":{"slug":"/js-localstorage/"}}},{"node":{"id":"c72a3715-9f39-5f4c-8b3d-c5de9e379ed4","excerpt":"디스트럭처링 할당 (destructuring assignment) = 구조 분해 할당 구조화된 배열과 같은 이터러블 또는 객체를 비구조화하여 1개 이상의 변수에 개별적으로 할당하는 것을 의미한다. 36.1 배열 디스트럭처링 할당 ES5에서는 인덱스를 사용하여 반복적으로 배열 디스트럭처링 할당을 한다. ES6의 배열 디스트럭처링 할당 배열의 각 요소를 배열로부터 추출하여 1개 이상의 변수에 할당한다. 할당문 우변 항상 이어야 한다. 그렇지 않으면 에러가 발생한다. 배열의 인덱스를 기준으로 순서대로 할당된다. 변수의 개수와 이터러블의 요소 개수가 반드시 일치할 필요는 없다. 할당문 좌변 배열 리터럴 형태 로 할당받을 변수를 선언한다. 선언과 할당을 분리할 수도 있지만,  키워드를 사용할 수 없으므로 권장하지 않는다. 변수에 기본값을 설정할 수 있다. 기본값보다 할당된 값을 우선한다. Rest 요소  를 사용할 수 있다. 반드시 마지막에 위치 💡 배열 스트럭처링 할당은 이터러블에서 필요…","fields":{"slug":"/modern-js-deep-dive-36/"},"frontmatter":{"categories":"JS","title":"[모던 자바스크립트 Deev Dive] 36장","date":"December 05, 2021"}},"next":{"fields":{"slug":"/modern-js-deep-dive-04/"}},"previous":{"fields":{"slug":"/vanilla-js-tab-component/"}}},{"node":{"id":"462a25cb-f42c-526e-851f-93e94e9795fe","excerpt":"4.1 변수란 무엇일까? 애플리케이션은 모두 데이터를 입력받아 처리하고 결과를 출력한다.\n변수는 프로그래밍 언어에서 데이터를 관리하기 위한 핵심 개념이다.\n변수란 무엇인지 그리고 왜 필요한지 살펴보자! memory 메모리는 데이터를 저장할 수 있는 메모리 셀의 집합체이다. 각 셀은 고유의 메모리 주소(memory address)를 가진다.  은 연산을 통해 새로운 값 30을 생성하고, 그 값은 메모리 공간에 저장된다. 만약 결과값 30을 재사용하고자 한다면 어떻게 해야할까? 메모리 주소를 통해 연산 결과 30이 저장된 메모리 공간에 직접 접근해야 한다. 그러나 자바스크립트는 개발자의 직접적인 메모리 제어를 허용하지 않는다. 코드가 실행되기 이전에는 값이 저장된 메모리 주소도 알 수 없다. 따라서 메모리 주소를 통해 값에 직접 접근하려는 시도는 올바른 방법이 아니다. 변수 프로그래밍 언어는 기억하고 싶은 값을 메모리에 저장하고, 저장된 값을 읽어 들여 재사용하기 위해  라는 메커니즘…","fields":{"slug":"/modern-js-deep-dive-04/"},"frontmatter":{"categories":"JS","title":"[모던 자바스크립트 Deev Dive] 04장","date":"November 29, 2021"}},"next":{"fields":{"slug":"/github-profile/"}},"previous":{"fields":{"slug":"/modern-js-deep-dive-36/"}}},{"node":{"id":"17ea91df-6dc4-5148-b9d0-e1653264ff1c","excerpt":"👉🏻 소개 보기좋은 떡이 먹기도 좋다했다. README.md 파일을 활용해서 머찐 을 만들어 보자!  1. username/README.md 생성 은 특별한 레포이다. ✨ 자신의 Github username과 같은 이름의 레포를 만들면, 해당 레포의 README.md 파일을 통해 Gihub에 프로필을 띄울 수 있다. 아래 사진처럼 ,  을 선택하고 Repository를 생성한다.  이미 gxxrxn이라는 레포를 만들었기 때문에 빨간색 경고 메시지가 뜬다. 처음이라면 별다른 경고 없이 레파지토리를 생성할 수 있다! 2. README.md 꾸미기 레포 생성을 했다면, 아래 사진과 같이 자신의 Profile에 README 파일의 내용이 보일 것이다.  본격적으로 README를 꾸며보도록 하자! Shields.io로 뱃지 넣기 Shields.io로 아래와 같은 뱃지를 넣을 수 있다. Shields.io Sample Icons 👉🏻 소개 1. username/README.md 생성 2. REA…","fields":{"slug":"/github-profile/"},"frontmatter":{"categories":"Github","title":"멋진 Github 프로필을 만들어 보자. (수정중)","date":"October 29, 2021"}},"next":null,"previous":{"fields":{"slug":"/modern-js-deep-dive-04/"}}}]}},"staticQueryHashes":["1073350324","2938748437"]}